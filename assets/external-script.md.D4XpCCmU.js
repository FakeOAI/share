import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"外部脚本","description":"","frontmatter":{},"headers":[],"relativePath":"external-script.md","filePath":"external-script.md","lastUpdated":1753584310000}'),l={name:"external-script.md"};function e(p,s,h,k,r,E){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="外部脚本" tabindex="-1">外部脚本 <a class="header-anchor" href="#外部脚本" aria-label="Permalink to &quot;外部脚本&quot;">​</a></h1><p>为了实现高度的定制化需求，本项目的镜像站中支持引入外部的 <code>js</code> 脚本</p><h2 id="如何添加脚本" tabindex="-1">如何添加脚本 <a class="header-anchor" href="#如何添加脚本" aria-label="Permalink to &quot;如何添加脚本&quot;">​</a></h2><p>在项目根目录的 <code>public</code> 文件夹中添加一个 <code>external.js</code> 文件即可</p><h2 id="脚本能做啥" tabindex="-1">脚本能做啥？ <a class="header-anchor" href="#脚本能做啥" aria-label="Permalink to &quot;脚本能做啥？&quot;">​</a></h2><div class="warning custom-block github-alert"><p class="custom-block-title">提示</p><p>镜像站中默认引入了 <code>JQuery</code>（操作 Dom 元素）、<code>Sweetalert2</code>（UI 好看的弹窗）两个依赖，无需自己重复引入</p></div><ul><li><p>使用 <code>JQuery</code> 操作 <code>dom</code> 元素</p></li><li><p>使用 <code>Sweetalert2</code> 定制自己业务逻辑的弹窗</p></li><li><p>配置悬浮问号的弹窗显示内容，配置如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 需要在external.js中给window对象添加__actions_config属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.__actions_config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hidden: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否隐藏悬浮按钮，默认为false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;弹窗标题&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // actions是一个数组，且里面元素是每一个菜单的配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  actions: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      label: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 菜单左边的文字（必填）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 菜单左边的文字下的描述（选填）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // btn为菜单右边的按钮，如果不配置，默认不显示按钮</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      btn: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按钮名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;primary&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按钮类型，类型可选：\`primary\`、\`secondary\`</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按钮点击后的回调函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li></ul>`,7)]))}const o=i(l,[["render",e]]);export{c as __pageData,o as default};
