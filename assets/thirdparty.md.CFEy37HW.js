import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.Dh1jimFm.js";const l="/456306604-e1d9b110-871c-4ddc-91d4-06d6641634ab.png",p="/456309191-c2c29092-ee9c-45f5-9a68-90f937a2ce7d.png",h="/WechatIMG458.jpg",u=JSON.parse('{"title":"第三方模式","description":"","frontmatter":{},"headers":[],"relativePath":"thirdparty.md","filePath":"thirdparty.md","lastUpdated":1753584310000}'),e={name:"thirdparty.md"};function k(o,s,r,d,E,c){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="第三方模式" tabindex="-1">第三方模式 <a class="header-anchor" href="#第三方模式" aria-label="Permalink to &quot;第三方模式&quot;">​</a></h1><p>此模式是为了让已有自己用户体系的第三方更方便的接入此程序而设计的</p><h2 id="前提条件" tabindex="-1">前提条件 <a class="header-anchor" href="#前提条件" aria-label="Permalink to &quot;前提条件&quot;">​</a></h2><div class="warning custom-block github-alert"><p class="custom-block-title">重要提示</p><p>该模式需要拉取 <code>fakeoai/share-thirdparty</code> 镜像，详细配置请参考 <a href="https://github.com/FakeOAI/share/blob/118be1ee98b16d2a047f86f54f6e36ff95ceb9f2/docker-compose.yaml#L28" target="_blank" rel="noreferrer">docker-compose.yaml</a></p></div><h2 id="使用步骤" tabindex="-1">使用步骤 <a class="header-anchor" href="#使用步骤" aria-label="Permalink to &quot;使用步骤&quot;">​</a></h2><ol><li>然后需要在第三方配置中配置 <code>OAuth地址</code>，登录接口接口在服务端会去把前端接收的 code 传递到此地址中，你需要按照如下格式进行响应</li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// GET &lt;OAUTH_URL&gt;?code=xxx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 成功返回，响应码200，允许登录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   &quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户唯一标识&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   &quot;nickname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户昵称&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选，如果没有则使用 username 作为昵称</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   &quot;avatar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户头像地址&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 可选，url地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 失败返回，响应码必须&gt;=400，不允许登录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   &quot;detail&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;失败报错，此报错会在前端进行显示&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+l+'" alt="image"></p><ol start="2"><li><p>根据自己的需求设置对话限速以及模型限速，如果不限制用户的用量使用可以忽略不设置</p><p><img src="'+p+'" alt="image"></p></li></ol><h2 id="登录接口" tabindex="-1">登录接口 <a class="header-anchor" href="#登录接口" aria-label="Permalink to &quot;登录接口&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /client-api/login?code=xxx&amp;redirect=true</span></span></code></pre></div><p>该接口在服务器中会去调用 <code>OAuth地址</code> 接口，如果第三方返回成功的响应，程序会重定向到镜像的首页</p><h2 id="hooks-接口" tabindex="-1">Hooks 接口 <a class="header-anchor" href="#hooks-接口" aria-label="Permalink to &quot;Hooks 接口&quot;">​</a></h2><p>hooks 地址是一个用于更加细粒度控制用户行为的地址，把执行权限交给第三方，如：是否允许对话、与第三方之间的数据交互等</p><p><img src="'+h+`" alt="image"></p><p>配置之后，程序会在对应的类型场景下对该地址进行请求，如果有必要的数据，程序会一同携带发往该地址，第三方需要根据以下说明进行响应</p><ul><li><p><code>conversation_pre</code>：此 hook 会在 <strong>对话发起前</strong> 触发</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 程序发送的请求体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;conversation_pre&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户唯一标识&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原始对话请求体，里面包含对话模型以及对话内容，可以根据自己的逻辑处理内容审核以及限速等</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 成功响应，响应码200，即不拦截对话</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 失败响应，响应码&gt;=400，即拦截对话</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;detail&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;对话拦截报错内容，此报错用户是可见的，如内容审核、模型限速等提示&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>conversation_detail</code>：此 hook 会在 <strong>对话完成结束</strong> 以及 <strong>创建新会话</strong> 的时候触发</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 程序发送的请求体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;conversation_detail&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户唯一标识&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;conversation_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;会话ID&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 对话完成结束后才会有该字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 响应内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;label&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;自定义底部文字内容，如：你的对话次数还剩30次&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;clears_in&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3600</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 限速恢复时间，单位秒，如果有值会禁止所有模型调用和文件的上传</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul>`,17)]))}const y=i(e,[["render",k]]);export{u as __pageData,y as default};
